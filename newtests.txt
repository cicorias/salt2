
 * | Path | Method | PouchDB API |
 * |------|--------|-------------|
 * | / | GET | NA [3] |
 * | /:db | GET | info |
 * | /:db/_all_docs | GET, HEAD, POST [1] | allDocs |
 * | /:db/_bulk_get | POST | bulkGet |
 * | /:db/_changes | GET, POST [2] | changes |
 * | /:db/_local/thali_:id | GET, PUT, DELETE | get, put, remove |
 * | /:db/_local/:id |
 * | /:db/_revs_diff | POST | revsDiff |
 * | /:db/:id | GET | get |
 
 review the detailed spec
 https://github.com/thaliproject/Thali_CordovaPlugin/blob/vNext/thali/NextGeneration/security/thaliACLLayer.js
 
 
 
 if no identity, verify that it's loopback address calling.
 
  * If req.connection.pskIdentity is null/undefined then we MUST:
 * - check req.ip to make sure that the IP address is set to
 * "127.0.0.1"
 * - make a case sensitive string compare and make sure that
 * the value of the authorization header after the "CLEAR" keyword matches
 * the value set in this object.
 * If both checks pass then we MUST call next(). Otherwise we MUST immediately
 * return a 401 Unauthorized and close the connection as defined below. For now
 * we won't worry about also returning a www-authenticate header.
 
 
       /** https://wiki.apache.org/couchdb/HTTP_Document_API
       | Path                   | Method                  | PouchDB API |
     * |------                  |--------                 |-------------|
     * | /                      | GET                     | NA [3]    |
  ** a PUT to / is an add/update of a :db.   
  ** DB spedific paths - note that ':db' token to be substituted with the db name in that context
     * | /:db                   | GET                     | info |     
    ** | /:db/_all_docs         | GET, HEAD, POST [1]     | allDocs |
    ** | /:db/_changes          | GET, POST [2]           | changes |
     * | /:db/_bulk_get         | POST                    | bulkGet |
     * | /:db/_revs_diff        | POST                    | revsDiff |
  ** DB - resources
     * | /:db/:id               | GET                     | get |
     * | /:db/:id/attachment    | GET                     | get & getAttachment |
     * | /:db/_local/thali_:id  | GET, PUT, DELETE        | get, put, remove |
     * 
  * * HEAD is used to retrieve basic infomration; PUT or POST can create a document, with PUT the document ID is part of the path (:id)
  * * POST to a /:db path creates a new DOC. see /:db above.
  ** What is this? **
     * | /:db/_local/thali_:id  | GET, PUT, DELETE        | get, put, remove |
     * | /:db/_local/:id 
     * 
     * :db - Substitute with the name of the DB we are protecting.
     * :id - Substitute with the ID of a document as requested over the wire.
     * thali_:id - Is an ID that begins with the prefix thali_ and otherwise
     * is just an ID.
       */

      /**
       * note: http://stackoverflow.com/questions/4038885/how-to-design-a-string-matching-algorithm-where-the-input-is-the-exact-string-an
       * https://github.com/isaacs/minimatch
       * https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm
       * https://en.wikipedia.org/wiki/String_searching_algorithm#Single_pattern_algorithms
       * http://www-igm.univ-mlv.fr/~lecroq/string/index.html
       * 
       */

 